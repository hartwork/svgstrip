#! /usr/bin/env python
# Copyright (C) 2009 Sebastian Pipping <sebastian@pipping.org>
# Licensed under GPLv3 or later

import sys
import xml.dom.minidom

PACKAGE = 'svgstrip'
VERSION = '0.2.2'

class SvgStripper:
	def __init__(self):
		self.verbose = False
		self.pretend = False
		self.inplace = False
		self.input_filename = None

	def main(self, params):
		run, error = SvgStripper.parse_command_line(self, params)
		if error:
			return 1
		elif run:
			return SvgStripper.run(self)
		else:
			return 0

	def log(self, message):
		if self.verbose:
			print >> sys.stderr, message

	def error(self, message):
		print >> sys.stderr, "Error:", message

	def print_version(self):
		print "%s v%s" % (PACKAGE, VERSION)

	def print_usage(self):
		print >> sys.stderr, """\
USAGE
  svgstrip [-v|--verbose] [-p|--pretend] strip [[-i|--in-place] <filename>]
  svgstrip -h|--help
  svgstrip -V|--version

EXAMPLES
  svgstrip drawing.svg > stripped-drawing.svg
  svgstrip --in-place drawing.svg
"""

	def parse_command_line(self, params):
		run, error = (True, False)
		for v in params:
			if v == '--verbose' or v == '-v':
				self.verbose = True
			elif v == '--version' or v == '-V':
				SvgStripper.print_version(self)
				run = False
				break
			elif v == '--help' or v == '-h':
				SvgStripper.print_usage(self)
				run = False
				break
			elif v == '--pretend' or v == '-p':
				self.pretend = True
			elif v == '--in-place' or v == '-i':
				self.inplace = True
			else:
				if self.input_filename == None:
					self.input_filename = v
				else:
					# More than one filename given
					error = True
					break
		if self.input_filename == None:
			if self.inplace:
				# Stdin and in-place don't mix well
				error = True
			else:
				self.input_filename = '/dev/stdin'
		if error:
			SvgStripper.print_usage(self)
		return (run, error)

	def run(self):
		try:
			dom = xml.dom.minidom.parse(self.input_filename)
		except IOError:
			SvgStripper.error(self, "Could not read from file '%s'" % self.input_filename)
			return 1
		except xml.parsers.expat.ExpatError:
			SvgStripper.error(self, "File '%s' does not contain valid XML" % self.input_filename)
			return 1
		try:
			root_node = dom.getElementsByTagName("svg")[0]
		except IndexError:
			SvgStripper.error(self, "File '%s' does not contain valid SVG" % self.input_filename)
			return 1
		for v in ('sodipodi:absref', 'sodipodi:docbase', 'sodipodi:docname', \
				'inkscape:export-filename'):
			if root_node.hasAttribute(v):
				if not self.pretend:
					root_node.removeAttribute(v)
				SvgStripper.log(self, "Attribute %s deleted" % v)
		output_filename = self.inplace \
				and self.input_filename \
				or '/dev/stdout'
		if not (self.inplace and self.pretend):
			try:
				output_file = open(output_filename, 'w')
			except IOError:
				SvgStripper.error(self, "Could not write to file '%s'" % output_filename)
				return 1
			dom.writexml(output_file)
			print >> output_file  # Trailing newline
			output_file.close()
		return 0

if __name__ == "__main__":
	stripper = SvgStripper()
	res = stripper.main(sys.argv[1:])
	sys.exit(res)
